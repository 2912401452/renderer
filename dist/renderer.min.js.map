{"version":3,"file":"renderer.min.js","sources":["../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/mat4.js","../node_modules/gl-matrix/esm/vec3.js","../src/utils/math.ts","../src/components/group/index.ts","../src/components/scene/index.ts","../src/utils/gl.ts","../src/components/object/Color.ts","../src/utils/texture.ts","../src/components/material/BasicMaterial.ts","../src/components/material/Material.ts","../src/components/plane/index.ts","../src/utils/viewport.ts","../src/utils/camera.ts","../src/components/utils/dom.ts","../src/components/renderer/index.ts","../src/components/pass/gray.ts"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","// @ts-nocheck\nimport { Point } from './interface';\n\nexport function calMeshModelMatrix(mesh) {}\n\nexport function calMeshWorldModelMatrix(mesh) {}\n\nexport const generateUUID = (function() {\n  var lut = [];\n\n  for (var i = 0; i < 256; i++) {\n    lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n  }\n\n  return function generateUUID() {\n    var d0 = (Math.random() * 0xffffffff) | 0;\n    var d1 = (Math.random() * 0xffffffff) | 0;\n    var d2 = (Math.random() * 0xffffffff) | 0;\n    var d3 = (Math.random() * 0xffffffff) | 0;\n    var uuid =\n      lut[d0 & 0xff] +\n      lut[(d0 >> 8) & 0xff] +\n      lut[(d0 >> 16) & 0xff] +\n      lut[(d0 >> 24) & 0xff] +\n      '-' +\n      lut[d1 & 0xff] +\n      lut[(d1 >> 8) & 0xff] +\n      '-' +\n      lut[((d1 >> 16) & 0x0f) | 0x40] +\n      lut[(d1 >> 24) & 0xff] +\n      '-' +\n      lut[(d2 & 0x3f) | 0x80] +\n      lut[(d2 >> 8) & 0xff] +\n      '-' +\n      lut[(d2 >> 16) & 0xff] +\n      lut[(d2 >> 24) & 0xff] +\n      lut[d3 & 0xff] +\n      lut[(d3 >> 8) & 0xff] +\n      lut[(d3 >> 16) & 0xff] +\n      lut[(d3 >> 24) & 0xff];\n\n    // .toUpperCase() here flattens concatenated strings to save heap memory space.\n    return uuid.toUpperCase();\n  };\n})();\n\nexport function isPowerOfTwo(value) {\n  return (value & (value - 1)) === 0 && value !== 0;\n}\n\nexport function floorPowerOfTwo(value) {\n  return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n}\n\nexport function distance(point1: Point, point2: Point) {\n  const r1 = Math.pow(point1[0] - point2[0], 2);\n  const r2 = Math.pow(point1[1] - point2[1], 2);\n  const r3 = Math.pow(point1[2] - point2[2], 2);\n  return Math.sqrt(r1 + r2 + r3);\n}\n","// @ts-nocheck\nimport { Point } from '@/utils/interface';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { generateUUID } from '../../utils/math';\nexport default class Group {\n  public uuid: string;\n  public gl: WebGLRenderingContext;\n\n  public projMatrix: mat4;\n  public viewMatrix: mat4;\n  public modelMatrix: mat4;\n\n  public position: Point;\n\n  public cameraDistance: number;\n\n  constructor(props) {\n    this.uuid = generateUUID();\n\n    this.gl = props.gl;\n    this.position = props?.position || [0, 0, 0];\n    this.rotation = props?.rotation || [0, 0, 0];\n    this.scale = props?.scale || [1, 1, 1];\n\n    // 存储子对象\n    this.childrens = [];\n\n    this.setMeshMatrixs();\n    this.modelMatrix = this.initModelMatrix();\n  }\n\n  /**\n   * 设置网格的矩阵\n   */\n  setMeshMatrixs() {\n    this.setTranslete(this.position);\n    this.setRotate();\n    this.setScaleMatrix();\n  }\n\n  /**\n   * 设置移动\n   * @param {*} position\n   */\n  setTranslete(position) {\n    this.translateMatrix = mat4.create();\n    mat4.translate(this.translateMatrix, this.translateMatrix, position);\n\n    if (this.rotateMatrix && this.scaleMatrix) {\n      this.updateModelMatrix();\n    }\n  }\n\n  /**\n   * 设置旋转矩阵\n   */\n  setRotate(rotation) {\n    if (rotation) {\n      this.rotation = [...rotation];\n    }\n    this.rotateMatrix = mat4.create();\n\n    mat4.rotate(\n      this.rotateMatrix,\n      this.rotateMatrix,\n      this.rotation[0],\n      vec3.fromValues(1, 0, 0),\n    );\n    mat4.rotate(\n      this.rotateMatrix,\n      this.rotateMatrix,\n      this.rotation[1],\n      vec3.fromValues(0, 1, 0),\n    );\n    mat4.rotate(\n      this.rotateMatrix,\n      this.rotateMatrix,\n      this.rotation[2],\n      vec3.fromValues(0, 0, 1),\n    );\n\n    if (this.translateMatrix && this.scaleMatrix) {\n      this.updateModelMatrix();\n    }\n  }\n\n  /**\n   * 设置缩放矩阵\n   */\n  setScaleMatrix() {\n    this.scaleMatrix = mat4.create();\n  }\n\n  /**\n   * 初始化模型矩阵\n   * @returns\n   */\n  initModelMatrix() {\n    return mat4.multiply(\n      mat4.create(),\n      this.scaleMatrix,\n      mat4.multiply(mat4.create(), this.translateMatrix, this.rotateMatrix),\n    );\n  }\n\n  /**\n   * 更新模型网格本身的模型矩阵、同时应用父级的模型矩阵\n   */\n  updateModelMatrix() {\n    mat4.multiply(\n      this.modelMatrix,\n      this.scaleMatrix,\n      mat4.multiply(mat4.create(), this.translateMatrix, this.rotateMatrix),\n    );\n    let parentMatrix = this?.parent?.modelMatrix || mat4.create();\n    mat4.multiply(this.modelMatrix, parentMatrix, this.modelMatrix);\n\n    // 更新子节点的矩阵\n    this.childrens.map(child => child.updateModelMatrix());\n  }\n\n  /**\n   * 设置网格绕轴旋转\n   * @param {*} rotateValues\n   */\n  rotate(rotateValues) {\n    // 更新网格本身记录的旋转角度\n    this.rotation[0] += rotateValues[0];\n    this.rotation[1] += rotateValues[1];\n    this.rotation[2] += rotateValues[2];\n\n    // 更新旋转矩阵\n    mat4.rotateX(this.rotateMatrix, this.rotateMatrix, rotateValues[0]);\n    mat4.rotateY(this.rotateMatrix, this.rotateMatrix, rotateValues[1]);\n    mat4.rotateZ(this.rotateMatrix, this.rotateMatrix, rotateValues[2]);\n\n    // 更新模型矩阵\n    this.updateModelMatrix();\n  }\n\n  /**\n   * 增加子对象\n   * @param {*} mesh\n   */\n  add(mesh) {\n    // TODO: 判断当前对象的子节点中不存在 mesh\n    if (!this.hasChildren(mesh)) {\n      mesh.parent && mesh.parent.remove(mesh);\n      mesh.setParent(this);\n      this.childrens.push(mesh);\n    }\n  }\n\n  /**\n   * 判断当前对象的子节点中是否存在对象 object\n   * @param {*} object\n   * @returns\n   */\n  hasChildren(object) {\n    if (object.uuid) {\n      return (\n        this.childrens.filter(child => child.uuid === object.uuid).length > 0\n      );\n    }\n    return false;\n  }\n\n  /**\n   * 设置 parent 节点\n   * @param {*} parent | undefined\n   */\n  setParent(parent) {\n    this.parent = parent;\n  }\n\n  /**\n   * 移除子对象\n   * @param {*} uuid\n   */\n  remove(uuid) {\n    this.childrens = this.childrens.filter(child => {\n      if (child.uuid === uuid) {\n        child.setParent(undefined);\n      }\n      return child.uuid !== uuid;\n    });\n  }\n}\n","// @ts-nocheck\nimport { ICamera } from '../../utils/camera';\nimport { IPass } from '../pass/gray';\nimport Group from '../group';\nimport { distance } from '@/utils/math';\n// 场景类 主要是管理场景中所有的网格\nexport interface IScene {\n  renderScene(): void;\n}\n\ninterface ISceneProps {}\nexport default class Scene extends Group implements IScene {\n  public type: string = 'Scene';\n  public gl: WebGLRenderingContext;\n  public camera: ICamera;\n  public passList: IPass[];\n  public children: any[] = [];\n\n  constructor(props) {\n    super(props);\n\n    this.renderer = props.renderer;\n    this.gl = this.renderer.gl;\n    this.camera = props.camera;\n\n    // pass manager - for now\n    this.passList = [];\n  }\n\n  /**\n   * 增加子对象\n   * @param {*} mesh\n   */\n  add(mesh) {\n    mesh.init(this.gl, this.camera);\n\n    // TODO: 判断当前对象的子节点中不存在 mesh\n    if (!this.hasChildren(mesh)) {\n      mesh.parent && mesh.parent.remove(mesh);\n      mesh.setParent(this);\n      this.children.push(mesh);\n\n      // 复写 add 方法\n      mesh.scene = this;\n    }\n  }\n\n  setCamera(camera: ICamera) {\n    this.camera = camera;\n  }\n\n  setRenderer() {}\n\n  /**\n   * 增加后处理 pass\n   * @param {*} pass\n   */\n  addPass(pass: IPass) {\n    pass.init(this.gl);\n    this.passList.push(pass);\n  }\n\n  /**\n   * 绘制场景中所有的对象\n   */\n  drawElements() {\n    // 绘制透明物体 - 简单的透明绘制排序\n    let unTransparentMeshes = []; // 不透明 mesh\n    let transparentMeshes = []; // 透明 mesh\n\n    this.children.forEach(mesh => {\n      mesh.cameraDistance = distance(mesh.position, this.camera.position);\n\n      if (mesh.material.transparent) {\n        transparentMeshes.push(mesh);\n      } else {\n        unTransparentMeshes.push(mesh);\n      }\n    });\n\n    unTransparentMeshes.sort((a, b) => a.cameraDistance - b.cameraDistance);\n\n    unTransparentMeshes.map(mesh => mesh.draw(this.camera));\n\n    this.gl.depthMask(false);\n\n    transparentMeshes.map(mesh => mesh.draw(this.camera));\n\n    this.gl.depthMask(true);\n  }\n\n  renderScene() {\n    if (this.passList.length > 0) {\n      for (let i = 0; i < this.passList.length; i++) {\n        let pass = this.passList[i];\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, pass.framebuffer);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n        if (i === 0) {\n          // 将场景内容绘制到 pass framebuffer\n          this.drawElements();\n        } else {\n          // 将场景内容会到链接的 pass framebuffer\n          // Tip: 还未完善\n        }\n\n        // 将 pass 中的结果绘制到 default framebuffer\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n        pass.drawPass();\n      }\n    } else {\n      this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n      this.drawElements();\n    }\n  }\n}\n","// @ts-nocheck\n\nimport { floorPowerOfTwo } from '../utils/math';\nexport function createProgram(gl, vshader, fshader) {\n  // Create shader object\n  var vertexShader = loadShader(gl, gl.VERTEX_SHADER, vshader); // 创建顶点着色器对象\n  var fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fshader); // 创建片元着色器对象\n  if (!vertexShader || !fragmentShader) {\n    return null;\n  }\n\n  // Create a program object\n  var program = gl.createProgram(); // 创建程序对象\n  if (!program) {\n    return null;\n  }\n\n  // Attach the shader objects\n  gl.attachShader(program, vertexShader); // 绑定着色器对象\n  gl.attachShader(program, fragmentShader);\n\n  // Link the program object\n  gl.linkProgram(program); // 链接着色器对象\n\n  // Check the result of linking\n  var linked = gl.getProgramParameter(program, gl.LINK_STATUS); // 判断着色器对象是否链接成功\n  if (!linked) {\n    var error = gl.getProgramInfoLog(program);\n    console.log('Failed to link program: ' + error);\n    gl.deleteProgram(program);\n    gl.deleteShader(fragmentShader);\n    gl.deleteShader(vertexShader);\n    return null;\n  }\n  return program;\n}\n\nexport function loadShader(gl, type, source) {\n  // Create shader object\n  var shader = gl.createShader(type); // 生成着色器对象\n  if (shader == null) {\n    console.log('unable to create shader');\n    return null;\n  }\n\n  // Set the shader program\n  gl.shaderSource(shader, source); // 载入着色器\n\n  // Compile the shader\n  gl.compileShader(shader); // 编译着色器代码\n\n  // Check the result of compilation\n  var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS); // 判断着色器对象是否生成成功\n  // gl.SHADER_TYPE、gl.DELETE_STATUS、gl.COMPILE_STATUS\n  if (!compiled) {\n    var error = gl.getShaderInfoLog(shader);\n    console.log('Failed to compile shader: ' + error);\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n\nexport function bindAttriBuffer(gl, attrName, vertices, count, program) {\n  let buffer = gl.createBuffer();\n  if (!buffer) {\n    console.log('failed create vertex buffer');\n  }\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer); // 将缓冲区对象绑定到目标\n  gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW); // 向缓冲区对象中写入数据\n\n  let attr = gl.getAttribLocation(program, attrName);\n  gl.vertexAttribPointer(attr, count, gl.FLOAT, false, 0, 0);\n  gl.enableVertexAttribArray(attr);\n  gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  return { buffer, attr, count };\n}\n\nexport function bindUnifrom(gl, unifromName, data, program, vec) {\n  let uniform = gl.getUniformLocation(program, unifromName);\n  if (uniform < 0) {\n    console.log('无法获取 uniform 变量的存储位置');\n  }\n  setUnifrom(gl, uniform, data, vec);\n  return uniform;\n}\n\nexport function setUnifrom(gl, location, data, vec) {\n  switch (vec) {\n    case 'float':\n      gl.uniform1f(location, data);\n      break;\n    case 'vec2':\n      gl.uniform2fv(location, data);\n      break;\n    case 'vec3':\n      gl.uniform3fv(location, data);\n      break;\n    case 'vec4':\n      gl.uniform4fv(location, data);\n      break;\n    case 'bool':\n      gl.uniform1i(location, data); // 1 - true    0 - false\n      break;\n    case 'sampler2d':\n      break;\n    case 'mat4':\n      gl.uniformMatrix4fv(location, false, data);\n      break;\n  }\n}\n\nexport function initFramebuffer(gl) {\n  const { drawingBufferWidth, drawingBufferHeight } = gl;\n  // floorPowerOfTwo(OFFER_SCREEN_WIDTH)\n  // console.log(floorPowerOfTwo(OFFER_SCREEN_WIDTH), floorPowerOfTwo(OFFER_SCREEN_HEIGHT))\n  const OFFER_SCREEN_WIDTH = floorPowerOfTwo(drawingBufferWidth);\n  const OFFER_SCREEN_HEIGHT = floorPowerOfTwo(drawingBufferHeight);\n\n  const FRAMEBUFFER = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, FRAMEBUFFER);\n  var depthbuffer = gl.createRenderbuffer();\n  gl.bindRenderbuffer(gl.RENDERBUFFER, depthbuffer);\n  gl.renderbufferStorage(\n    gl.RENDERBUFFER,\n    gl.DEPTH_COMPONENT16,\n    OFFER_SCREEN_WIDTH,\n    OFFER_SCREEN_HEIGHT,\n  );\n  gl.framebufferRenderbuffer(\n    gl.FRAMEBUFFER,\n    gl.DEPTH_ATTACHMENT,\n    gl.RENDERBUFFER,\n    depthbuffer,\n  );\n\n  const texture = gl.createTexture();\n  FRAMEBUFFER.texture = texture;\n  FRAMEBUFFER.width = OFFER_SCREEN_WIDTH;\n  FRAMEBUFFER.height = OFFER_SCREEN_HEIGHT;\n\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    gl.RGBA,\n    OFFER_SCREEN_WIDTH,\n    OFFER_SCREEN_HEIGHT,\n    0,\n    gl.RGBA,\n    gl.UNSIGNED_BYTE,\n    null,\n  );\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    texture,\n    0,\n  );\n  gl.bindTexture(gl.TEXTURE_2D, null);\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n  return { FRAMEBUFFER, OFFER_SCREEN_WIDTH, OFFER_SCREEN_HEIGHT };\n}\n","// @ts-nocheck\nconst COLORS = ['red', 'yellow', 'blue', 'green', 'white', 'black'];\n\nexport interface IColor {\n  type: string;\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n\n  handleStringColor(str: string): void;\n  handle16Color(): void;\n  getRGBA(): number[];\n  getRGB(): number[];\n}\n\nexport default class Color implements IColor {\n  public type: string = 'Color';\n  public r: number = 1;\n  public g: number = 1;\n  public b: number = 1;\n  public a: number = 1;\n\n  constructor(props: string | undefined | IColor | number[]) {\n    if (typeof props === 'string') {\n      this.handleStringColor(props);\n    } else if (props instanceof Array) {\n      this.r = props[0];\n      this.g = props[1];\n      this.b = props[2];\n      this.a = props[3];\n    } else if (Color.isColor(props)) {\n      this.r = props.r;\n      this.g = props.g;\n      this.b = props.b;\n      this.a = props.a;\n    }\n  }\n\n  handleStringColor(str) {\n    if (str.startsWith('#')) {\n      this.handle16Color(str);\n    } else {\n      switch (str) {\n        case 'red':\n          this.r = 1;\n          this.g = 0;\n          this.b = 0;\n          this.a = 1;\n          break;\n        case 'yellow':\n          this.r = 1;\n          this.g = 1;\n          this.b = 0;\n          this.a = 1;\n          break;\n        case 'blue':\n          this.r = 0;\n          this.g = 0;\n          this.b = 1;\n          this.a = 1;\n          break;\n        case 'green':\n          this.r = 0;\n          this.g = 1;\n          this.b = 0;\n          this.a = 1;\n          break;\n        case 'white':\n          this.r = 1;\n          this.g = 1;\n          this.b = 1;\n          this.a = 1;\n          break;\n        case 'black':\n          this.r = 0;\n          this.g = 0;\n          this.b = 0;\n          this.a = 1;\n          break;\n      }\n    }\n  }\n\n  handle16Color() {\n    this.r = 1;\n    this.g = 1;\n    this.b = 1;\n    this.a = 1;\n  }\n\n  getRGBA() {\n    return [this.r, this.g, this.b, this.a];\n  }\n\n  getRGB() {\n    return [this.r, this.g, this.b];\n  }\n}\n\nColor.isColor = function(object) {\n  if (object && object.type && object.type === 'Color') {\n    return true;\n  } else {\n    return false;\n  }\n};\n","// @ts-nocheck\nimport * as _Math from './math';\n\nconst useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined';\n\nexport function textureNeedsPowerOfTwo(texture) {\n  // if ( capabilities.isWebGL2 ) return false;\n  // return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n  //     ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n}\n\nexport function isPowerOfTwo(image) {\n  return _Math.isPowerOfTwo(image.width) && _Math.isPowerOfTwo(image.height);\n}\n\nexport function createCanvas(width, height) {\n  // Use OffscreenCanvas when available. Specially needed in web workers\n\n  return useOffscreenCanvas\n    ? new OffscreenCanvas(width, height)\n    : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n}\n\nexport function resizeImage(image) {\n  var width = _Math.floorPowerOfTwo(image.width);\n  var height = _Math.floorPowerOfTwo(image.height);\n\n  var canvas = createCanvas(width, height);\n  canvas.width = width;\n  canvas.height = height;\n  var context = canvas.getContext('2d');\n  context.drawImage(image, 0, 0, width, height);\n  return canvas;\n}\n\nexport function loadImage(imgSrc) {\n  return new Promise((resolve, reject) => {\n    let img = new Image();\n    img.src = imgSrc;\n    img.crossOrigin = 'anonymous';\n    img.onload = () => {\n      if (!isPowerOfTwo(img)) {\n        resolve({\n          succeed: true,\n          img: resizeImage(img),\n        });\n      } else {\n        resolve({\n          succeed: true,\n          img,\n        });\n      }\n    };\n    img.onerror = err => {\n      reject({\n        succeed: false,\n        img,\n      });\n    };\n  });\n}\n","import Material from './Material';\nimport { loadImage } from '../../utils/texture';\n\nimport Color, { IColor } from '../object/Color';\n\nexport interface IBasicMaterial {\n  color: IColor;\n  transparent: boolean;\n  opacity: number;\n  map?: any;\n  texture?: WebGLTexture | null;\n\n  init(gl: WebGLRenderingContext): void;\n}\ninterface IBasicMaterialProps {\n  transparent?: boolean;\n  opacity?: number;\n  color?: string;\n  map?: any;\n  image?: HTMLImageElement;\n}\n\nexport default class BasicMaterial extends Material {\n  public color: IColor;\n  public opacity: number = 1.0;\n  public transparent: boolean = false;\n  public map: any;\n  public image: HTMLImageElement;\n\n  public gl: WebGLRenderingContext;\n  public texture: WebGLTexture | null;\n\n  constructor(props: IBasicMaterialProps) {\n    super();\n    this.color = new Color(props.color);\n    props.opacity !== undefined && (this.opacity = props.opacity);\n    props.transparent !== undefined && (this.transparent = props.transparent);\n\n    this.map = props?.map || undefined;\n  }\n\n  async init(gl: WebGLRenderingContext) {\n    this.gl = gl;\n    if (this.map) {\n      let { succeed, img } = (await loadImage(this.map)) as {\n        succeed: boolean;\n        img: HTMLImageElement;\n      };\n      if (succeed) {\n        this.image = img;\n        this.initTexture();\n      }\n    }\n  }\n\n  initTexture() {\n    this.texture = this.gl.createTexture();\n    this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, 1); // 对纹理图像进行 Y 轴反转 - 点精灵不需要翻转\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);\n    this.gl.texParameteri(\n      this.gl.TEXTURE_2D,\n      this.gl.TEXTURE_MIN_FILTER,\n      this.gl.LINEAR,\n    );\n    this.gl.texParameteri(\n      this.gl.TEXTURE_2D,\n      this.gl.TEXTURE_WRAP_S,\n      this.gl.REPEAT,\n    );\n    this.gl.texParameteri(\n      this.gl.TEXTURE_2D,\n      this.gl.TEXTURE_WRAP_T,\n      this.gl.CLAMP_TO_EDGE,\n    );\n\n    this.gl.texImage2D(\n      this.gl.TEXTURE_2D,\n      0,\n      this.gl.RGBA,\n      this.gl.RGBA,\n      this.gl.UNSIGNED_BYTE,\n      this.image,\n    );\n\n    this.emit('loadImage', {\n      texture: this.texture,\n      img: this.image,\n    });\n  }\n\n  destroy() {}\n}\n","// @ts-nocheck\nexport default class Material {\n  constructor() {\n    this.listeners = {};\n  }\n\n  on(name, fn) {\n    if (!this.listeners[name]) {\n      this.listeners[name] = [];\n    }\n    this.listeners[name].push(fn);\n  }\n\n  emit(name, val) {\n    if (this.listeners[name]) {\n      this.listeners[name].map(fn => {\n        fn(val);\n      });\n    }\n  }\n\n  off(name, fn) {\n    if (this.listeners[name]) {\n      if (fn) {\n        let index = this.listeners[name].indexOf(fn);\n        if (index > -1) {\n          this.listeners[name].splice(index, 1);\n        }\n      } else {\n        this.listeners[name].length = 0;\n        //设长度为0比obj[name] = []更优，因为如果是空数组则又开辟了一个新空间，设长度为0则不必开辟新空间\n      }\n    }\n  }\n}\n","import { ICamera } from '@/utils/camera';\nimport { mat4 } from 'gl-matrix';\nimport * as glUtils from '../../utils/gl';\nimport Group from '../group';\nimport { IScene } from '../scene';\nimport Color, { IColor } from '../object/Color';\nimport BasicMaterial, { IBasicMaterial } from '../material/BasicMaterial';\nimport { distance } from '../../utils/math';\nexport default class Plane extends Group {\n  public type: string = 'PlaneMesh';\n  public scene: IScene;\n  public camera: ICamera;\n  public color: IColor;\n\n  public material: IBasicMaterial = new BasicMaterial({});\n  public width: number = 1;\n  public height: number = 1;\n\n  public imgLoading: boolean = false;\n\n  public shaderUnifroms: any[];\n  public shaderAttributes: any[];\n\n  public program: WebGLProgram;\n  public texture: WebGLTexture;\n\n  constructor(props: any) {\n    super(props);\n\n    props.material !== undefined && (this.material = props.material);\n    props.width !== undefined && (this.width = props.width);\n    props.height !== undefined && (this.height = props.height);\n\n    // 当前对象的 shader 变量参数列表\n    this.shaderUnifroms = [];\n    this.shaderAttributes = [];\n  }\n\n  init(gl: WebGLRenderingContext, camera: ICamera) {\n    this.gl = gl;\n    this.camera = camera;\n\n    this.cameraDistance = distance(camera.position, this.position);\n    // console.log('this.cameraDistance', this.cameraDistance)\n    this.material.init(this.gl);\n\n    this.program = glUtils.createProgram(\n      this.gl,\n      this.getRectVSHADER(),\n      this.getRectFSHADER(),\n    );\n    this.gl.useProgram(this.program);\n\n    var rectVertices = new Float32Array([\n      // 将纹理 st/uv 映射到顶点坐标\n      -this.width / 2,\n      this.height / 2, //左上角\n      -this.width / 2,\n      -this.height / 2, //左下角\n      this.width / 2,\n      this.height / 2, //右上角\n      this.width / 2,\n      -this.height / 2, //右下角\n    ]);\n\n    var rectUvs = new Float32Array([\n      // rect uvs\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      1.0,\n      1.0,\n      1.0,\n      0.0,\n    ]);\n    var FSIZE = rectVertices.BYTES_PER_ELEMENT;\n    this.color = new Color(this?.material?.color);\n\n    this.setUnifroms();\n\n    this.shaderAttributes.push(\n      glUtils.bindAttriBuffer(\n        this.gl,\n        'a_Position',\n        rectVertices,\n        2,\n        this.program,\n      ),\n    );\n    this.shaderAttributes.push(\n      glUtils.bindAttriBuffer(this.gl, 'a_TextCoord', rectUvs, 2, this.program),\n    );\n\n    this.gl.useProgram(null);\n  }\n\n  /**\n   * @param camera\n   */\n  setCamera(camera: ICamera) {\n    this.camera = camera;\n  }\n\n  /**\n   * 设置当前着色器的 uniform 变量\n   */\n  setUnifroms() {\n    this.projMatrix = this.camera.getPerspectiveMatrix();\n    glUtils.bindUnifrom(\n      this.gl,\n      'u_projMatrix',\n      this.projMatrix,\n      this.program,\n      'mat4',\n    );\n\n    this.viewMatrix = this.camera.getViewMatrix();\n    glUtils.bindUnifrom(\n      this.gl,\n      'u_viewMatrix',\n      this.viewMatrix,\n      this.program,\n      'mat4',\n    );\n\n    glUtils.bindUnifrom(\n      this.gl,\n      'u_modelMatrix',\n      this.modelMatrix,\n      this.program,\n      'mat4',\n    );\n\n    glUtils.bindUnifrom(\n      this.gl,\n      'u_opacity',\n      this?.material?.opacity !== undefined ? this?.material?.opacity : 1.0,\n      this.program,\n      'float',\n    );\n\n    glUtils.bindUnifrom(\n      this.gl,\n      'u_color',\n      this.color.getRGB(),\n      this.program,\n      'vec3',\n    );\n\n    // uniformName, data, vec\n  }\n\n  /**\n   * 更新 shader 的 uniform 变量的值\n   */\n  updateShaderUnifroms() {\n    // reBindBuffer\n    this.shaderAttributes.map(({ buffer, attr, count }) => {\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer); // 将缓冲区对象绑定到目标\n      this.gl.vertexAttribPointer(attr, count, this.gl.FLOAT, false, 0, 0);\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n    });\n\n    // reBindUnifrom\n    this.setUnifroms();\n\n    // TODO: 每次渲染的时候重新为纹理分配纹理空间\n    if (this.texture) {\n      this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);\n      var u_Sampler = this.gl.getUniformLocation(this.program, 'u_Sampler');\n      this.gl.uniform1i(u_Sampler, 0);\n    }\n  }\n\n  /**\n   * 存储当前网格对象的 unifrom 变量\n   */\n  addShaderUnifroms(uniformName: string, data: any, vec: string) {\n    this.shaderUnifroms.push({ uniformName, data, vec });\n  }\n\n  /**\n   * 绘制当前的网格对象\n   */\n  draw(camera: ICamera) {\n    // TODO: 在纹理加载过程中或相机不存在时不渲染\n    if (this.imgLoading || !camera) return;\n\n    // TODO:  切换程序对象\n    this.gl.useProgram(this.program);\n\n    // TODO: reset camera\n    this.setCamera(camera);\n\n    // update unifrom\n    this.updateShaderUnifroms();\n\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n  }\n\n  /**\n   * 返回顶点着色器代码\n   * @returns\n   */\n  getRectVSHADER() {\n    return `\n            uniform mat4 u_projMatrix;\n            uniform mat4 u_viewMatrix;\n            uniform mat4 u_modelMatrix;\n\n            attribute vec4 a_Position;\n            attribute vec2 a_TextCoord;\n            varying vec2 v_uv;\n            void main(){\n                v_uv = a_TextCoord;\n\n                gl_Position = u_projMatrix * u_viewMatrix *  u_modelMatrix * a_Position;\n           \n            }\n        `;\n  }\n\n  /**\n   * 返回片元着色器代码\n   * @returns\n   */\n  getRectFSHADER() {\n    let firstLine = 'precision mediump float;\\n';\n    let gl_FragColorLine = 'gl_FragColor = vec4(u_color, u_opacity);\\n';\n\n    let unifromLines = ['uniform float u_opacity;\\n', 'uniform vec3 u_color;'];\n\n    if (this?.material?.map) {\n      this.imgLoading = true;\n      unifromLines.push('uniform sampler2D u_Sampler;\\n');\n      // @ts-ignore\n      this.material?.on('loadImage', ({ texture, img }) => {\n        this.gl.useProgram(this.program);\n\n        // TODO: cache texture\n        this.texture = texture;\n\n        this.gl.activeTexture(this.gl.TEXTURE0); // 激活0号纹理单元\n        this.material.texture &&\n          this.gl.bindTexture(this.gl.TEXTURE_2D, texture); // 绑定纹理单元\n\n        var u_Sampler = this.gl.getUniformLocation(this.program, 'u_Sampler');\n        this.gl.uniform1i(u_Sampler, 0);\n\n        this.imgLoading = false;\n\n        this.scene && this.scene.renderScene();\n      });\n      gl_FragColorLine = 'gl_FragColor = texture2D(u_Sampler, v_uv);\\n';\n    }\n    // TODO: 拼装 shader\n    const shader =\n      firstLine +\n      unifromLines.join('') +\n      `\n      varying vec2 v_uv;\n      void main(){\n        ${gl_FragColorLine}\n        gl_FragColor.a *= u_opacity;\n      }\n      `;\n    return shader;\n  }\n}\n","// @ts-nocheck\nimport { mat4 } from 'gl-matrix';\n/**\n * 视图\n */\nexport class ViewPort {\n  constructor(props) {\n    this.eye = props?.eye || [1, 1, 1];\n    this.target = props?.target || [0, 0, 0];\n    this.up = props?.up || [0, 1, 0];\n\n    this.viewMatrix = mat4.create();\n    this.initViewMatrix();\n  }\n\n  initViewMatrix() {\n    mat4.lookAt(this.viewMatrix, this.eye, this.target, this.up);\n  }\n\n  getViewMatrix() {\n    return this.viewMatrix;\n  }\n}\n","//@ts-nocheck\nimport { mat4 } from 'gl-matrix';\nimport { Point } from './interface';\nimport { ViewPort } from './viewport';\n\nexport interface ICamera {\n  position: Point;\n\n  getViewMatrix(): mat4;\n  getPerspectiveMatrix(): mat4;\n}\n// 简单的相机\nexport default class Camera implements ICamera {\n  public position: number[];\n  public aspect: number;\n  constructor(props) {\n    this.fov = props?.fov || 40;\n    this.aspect = props?.aspect || 1;\n    // this.aspect =  1;\n    this.near = props?.near || 0.01;\n    this.far = props?.far || 100;\n\n    this.position = props?.position || [1, 1, 1];\n    this.target = props?.target || [0, 0, 0];\n    this.up = props?.up || [0, 1, 0];\n\n    this.viewPort = new ViewPort({\n      eye: this.position,\n      target: this.target,\n      up: this.up,\n    });\n\n    // 初始化透视矩阵\n    this.initPerspectiveMatrix();\n  }\n\n  /**\n   * 初始化透视矩阵\n   */\n  initPerspectiveMatrix() {\n    this.perspectiveMatrix = mat4.create();\n    mat4.perspective(\n      this.perspectiveMatrix,\n      (this.fov * Math.PI) / 180,\n      this.aspect,\n      this.near,\n      this.far,\n    );\n  }\n\n  resize(width: number, height: number) {\n    this.aspect = width / height;\n    // console.log('this.aspect', this.aspect)\n    this.updatePerspectiveMatrix();\n  }\n\n  /**\n   * 更新透视矩阵\n   */\n  updatePerspectiveMatrix() {\n    this.initPerspectiveMatrix();\n  }\n\n  getPerspectiveMatrix() {\n    return this.perspectiveMatrix;\n  }\n\n  getViewMatrix() {\n    return this.viewPort.getViewMatrix();\n  }\n}\n","export const getCanvas = function(width: number, height: number) {\n  const canvas = document.createElement('canvas');\n  setCanvas(canvas, width, height);\n  return canvas;\n};\n\nexport const setCanvas = function(\n  canvas: HTMLCanvasElement,\n  width: number,\n  height: number,\n) {\n  canvas.width = width * window.devicePixelRatio;\n  canvas.height = height * window.devicePixelRatio;\n  canvas.style.width = width + 'px';\n  canvas.style.height = height + 'px';\n};\n","import Color, { IColor } from '../object/Color';\nimport { getCanvas, setCanvas } from '../utils/dom';\n\ninterface IRender {\n  gl: WebGLRenderingContext;\n  canvas: HTMLCanvasElement;\n  wrap: HTMLElement;\n  renderPixelWidth: number;\n  renderPixelHeight: number;\n}\n\ninterface IRenderProps {\n  wrap: string | HTMLElement | HTMLCanvasElement;\n  clearColor: any;\n}\n\nexport default class Renderer implements IRender {\n  public gl: WebGLRenderingContext;\n  public wrap: HTMLElement;\n  public clearColor: IColor;\n  public canvas: HTMLCanvasElement;\n  public renderPixelWidth: number;\n  public renderPixelHeight: number;\n\n  constructor(props: IRenderProps) {\n    this.clearColor = new Color(props.clearColor);\n\n    this.initRenderContext(props.wrap);\n    this.renderPixelSize();\n  }\n\n  initRenderContext(wrap: string | HTMLElement) {\n    if (typeof wrap === 'string') {\n      this.wrap = document.getElementById('wrap') as HTMLElement;\n      let { clientWidth, clientHeight } = this.wrap;\n      this.canvas = getCanvas(clientWidth, clientHeight);\n    } else if (wrap instanceof HTMLCanvasElement) {\n      this.wrap = wrap.parentNode as HTMLElement;\n      this.canvas = wrap;\n    } else {\n      this.wrap = wrap;\n      let { clientWidth, clientHeight } = this.wrap;\n      this.canvas = getCanvas(clientWidth, clientHeight);\n    }\n\n    this.wrap.appendChild(this.canvas);\n    this.gl = this.canvas.getContext('webgl') as WebGLRenderingContext;\n\n    this.initGLParams(this.gl);\n  }\n\n  initGLParams(gl: WebGLRenderingContext) {\n    let c = this.clearColor.getRGBA();\n    gl.clearColor(c[0], c[1], c[2], c[3]);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    gl.enable(gl.DEPTH_TEST); // 开启深度检测\n    gl.clear(gl.DEPTH_BUFFER_BIT); // 清除深度缓存\n\n    gl.enable(gl.BLEND); // 开启混合\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); // 指定混合函数\n\n    gl.enable(gl.CULL_FACE); // 开启背面剔除\n    gl.disable(gl.CULL_FACE); // 关闭背面剔除\n  }\n\n  renderPixelSize() {\n    let { clientWidth, clientHeight } = this.canvas;\n    this.renderPixelWidth = clientWidth;\n    this.renderPixelHeight = clientHeight;\n  }\n\n  resize() {\n    let { clientWidth, clientHeight } = this.wrap;\n    setCanvas(this.canvas, clientWidth, clientHeight);\n    this.renderPixelSize();\n\n    this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n  }\n}\n","// @ts-nocheck\nimport * as glUtils from '../../utils/gl';\n\nexport interface IPass {\n  init(gl: WebGLRenderingContext): void;\n  drawPass(): void;\n}\n\nexport default class GrayPass implements IPass {\n  private gl: WebGLRenderingContext;\n  constructor(props) {\n    this.shaderAttributes = [];\n  }\n\n  init(gl: WebGLRenderingContext) {\n    this.gl = gl;\n    const {\n      FRAMEBUFFER,\n      OFFER_SCREEN_WIDTH,\n      OFFER_SCREEN_HEIGHT,\n    } = glUtils.initFramebuffer(this.gl);\n    this.framebuffer = FRAMEBUFFER;\n\n    this.v = `\n            attribute vec4 a_Position;\n            attribute vec2 a_TextCoord;\n            varying vec2 v_TexCoord;\n\n            void main(){\n                gl_Position = a_Position;\n                v_TexCoord = a_TextCoord;\n            }\n        `;\n    this.f = `\n            precision mediump float;\n\n            uniform sampler2D u_Sampler;\n            varying vec2 v_TexCoord;\n\n            void main(){\n                // https://www.cnblogs.com/zhangjiansheng/p/6925722.html\n                // Gray = (R*38 + G*75 + B*15) >> 7\n                // Gray = R*0.299 + G*0.587 + B*0.114\n                vec4 screenPixels = texture2D(u_Sampler, v_TexCoord);\n\n                float R = screenPixels.r;\n                float G = screenPixels.g;\n                float B = screenPixels.b;\n                float gray = R*0.299 + G*0.587 + B*0.114;\n            \n                gl_FragColor = vec4(vec3(gray), 1.0);\n            }`;\n\n    this.rectVertices = new Float32Array([\n      // 将纹理 st/uv 映射到顶点坐标\n      -1.0,\n      1.0, //左上角\n      -1.0,\n      -1.0, //左下角\n      1.0,\n      1.0, //右上角\n      1.0,\n      -1.0, //右下角\n    ]);\n\n    this.rectUvs = new Float32Array([\n      // rect uvs\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      1.0,\n      1.0,\n      1.0,\n      0.0,\n    ]);\n\n    this.program = glUtils.createProgram(this.gl, this.v, this.f);\n    this.gl.useProgram(this.program);\n    let {\n      buffer: posBuffer,\n      attr: pAttr,\n      count: posCount,\n    } = glUtils.bindAttriBuffer(\n      this.gl,\n      'a_Position',\n      this.rectVertices,\n      2,\n      this.program,\n    );\n    this.posBuffer = posBuffer;\n    this.pAttr = pAttr;\n    this.posCount = posCount;\n    let {\n      buffer: texBuffer,\n      attr: tAttr,\n      count: texCount,\n    } = glUtils.bindAttriBuffer(\n      this.gl,\n      'a_TextCoord',\n      this.rectUvs,\n      2,\n      this.program,\n    );\n    this.texBuffer = texBuffer;\n    this.texCount = texCount;\n\n    this.gl.activeTexture(this.gl.TEXTURE0); // 激活0号纹理单元\n    let u_Sampler = this.gl.getUniformLocation(this.program, 'u_Sampler');\n    this.gl.uniform1i(u_Sampler, 0);\n  }\n\n  drawPass() {\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    this.gl.useProgram(this.program);\n\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.posBuffer); // 将缓冲区对象绑定到目标\n    this.gl.vertexAttribPointer(\n      this.pAttr,\n      this.posCount,\n      this.gl.FLOAT,\n      false,\n      0,\n      0,\n    );\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.framebuffer.texture);\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n  }\n}\n"],"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","create","out","glMatrix.ARRAY_TYPE","multiply","a","b","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","rotate","rad","axis","s","c","t","b00","b01","b02","b10","b11","b12","b20","b21","b22","x","y","z","len","Math","hypot","glMatrix.EPSILON","sin","cos","i","arguments","length","sqrt","perspective","fovy","aspect","near","far","nf","f","tan","Infinity","fromValues","vec","generateUUID","lut","toString","d0","random","d1","d2","d3","toUpperCase","isPowerOfTwo","value","floorPowerOfTwo","pow","floor","log","LN2","distance","point1","point2","Group","props","uuid","gl","projMatrix","viewMatrix","modelMatrix","position","cameraDistance","rotation","scale","childrens","setMeshMatrixs","this","initModelMatrix","setTranslete","setRotate","setScaleMatrix","translateMatrix","mat4","v","rotateMatrix","scaleMatrix","updateModelMatrix","vec3","parentMatrix","parent","map","child","rotateValues","mesh","hasChildren","remove","setParent","push","object","filter","undefined","Scene","type","camera","passList","children","renderer","_this","init","scene","pass","unTransparentMeshes","transparentMeshes","forEach","_this2","material","transparent","sort","draw","depthMask","bindFramebuffer","FRAMEBUFFER","framebuffer","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","drawElements","drawPass","createProgram","vshader","fshader","vertexShader","loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","error","getProgramInfoLog","console","deleteProgram","deleteShader","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","bindAttriBuffer","attrName","vertices","count","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","attr","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","bindUnifrom","unifromName","data","uniform","getUniformLocation","location","uniform1f","uniform2fv","uniform3fv","uniform4fv","uniform1i","uniformMatrix4fv","setUnifrom","Color","r","g","handleStringColor","isColor","str","startsWith","handle16Color","useOffscreenCanvas","OffscreenCanvas","resizeImage","image","width","_Math","height","canvas","document","createElementNS","createCanvas","getContext","drawImage","loadImage","imgSrc","Promise","resolve","reject","img","Image","src","crossOrigin","onload","succeed","onerror","err","BasicMaterial","color","opacity","texture","initTexture","createTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","REPEAT","TEXTURE_WRAP_T","CLAMP_TO_EDGE","texImage2D","RGBA","UNSIGNED_BYTE","emit","listeners","name","fn","val","index","indexOf","splice","Plane","imgLoading","shaderUnifroms","shaderAttributes","glUtils","getRectVSHADER","getRectFSHADER","useProgram","rectVertices","rectUvs","_this$material","setUnifroms","getPerspectiveMatrix","getViewMatrix","_this$material3","getRGB","u_Sampler","uniformName","setCamera","updateShaderUnifroms","drawArrays","TRIANGLE_STRIP","gl_FragColorLine","unifromLines","_this$material4","on","_this3","activeTexture","TEXTURE0","renderScene","join","ViewPort","eye","target","up","initViewMatrix","center","x0","x1","x2","y0","y1","y2","z0","z1","z2","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","identity","Camera","fov","viewPort","initPerspectiveMatrix","perspectiveMatrix","PI","updatePerspectiveMatrix","getCanvas","createElement","setCanvas","window","devicePixelRatio","style","Renderer","wrap","clearColor","renderPixelWidth","renderPixelHeight","initRenderContext","renderPixelSize","getElementById","clientWidth","clientHeight","HTMLCanvasElement","parentNode","appendChild","initGLParams","getRGBA","enable","DEPTH_TEST","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","CULL_FACE","disable","viewport","GrayPass","drawingBufferHeight","OFFER_SCREEN_WIDTH","drawingBufferWidth","OFFER_SCREEN_HEIGHT","createFramebuffer","depthbuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","TEXTURE_MAG_FILTER","NEAREST","framebufferTexture2D","COLOR_ATTACHMENT0","pAttr","posCount","posBuffer","texCount","texBuffer"],"mappings":"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"}