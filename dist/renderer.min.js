!(function(t, e) {
  'object' == typeof exports && 'undefined' != typeof module
    ? e(exports)
    : 'function' == typeof define && define.amd
    ? define(['exports'], e)
    : e(
        ((t =
          'undefined' != typeof globalThis
            ? globalThis
            : t || self).renderer = {}),
      );
})(this, function(t) {
  'use strict';
  function e(t, e, i, r, n, a, s) {
    try {
      var o = t[a](s),
        h = o.value;
    } catch (t) {
      return void i(t);
    }
    o.done ? e(h) : Promise.resolve(h).then(r, n);
  }
  function i(t, e) {
    if (!(t instanceof e))
      throw new TypeError('Cannot call a class as a function');
  }
  function r(t, e) {
    for (var i = 0; e.length > i; i++) {
      var r = e[i];
      (r.enumerable = r.enumerable || !1),
        (r.configurable = !0),
        'value' in r && (r.writable = !0),
        Object.defineProperty(t, r.key, r);
    }
  }
  function n(t, e, i) {
    return e && r(t.prototype, e), i && r(t, i), t;
  }
  function a(t, e) {
    if ('function' != typeof e && null !== e)
      throw new TypeError('Super expression must either be null or a function');
    (t.prototype = Object.create(e && e.prototype, {
      constructor: { value: t, writable: !0, configurable: !0 },
    })),
      e && o(t, e);
  }
  function s(t) {
    return (
      (s = Object.setPrototypeOf
        ? Object.getPrototypeOf
        : function(t) {
            return t.__proto__ || Object.getPrototypeOf(t);
          }),
      s(t)
    );
  }
  function o(t, e) {
    return (
      (o =
        Object.setPrototypeOf ||
        function(t, e) {
          return (t.__proto__ = e), t;
        }),
      o(t, e)
    );
  }
  function h(t, e) {
    if (e && ('object' == typeof e || 'function' == typeof e)) return e;
    if (void 0 !== e)
      throw new TypeError(
        'Derived constructors may only return object or undefined',
      );
    return (function(t) {
      if (void 0 === t)
        throw new ReferenceError(
          "this hasn't been initialised - super() hasn't been called",
        );
      return t;
    })(t);
  }
  function l(t) {
    var e = (function() {
      if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
      if (Reflect.construct.sham) return !1;
      if ('function' == typeof Proxy) return !0;
      try {
        return (
          Boolean.prototype.valueOf.call(
            Reflect.construct(Boolean, [], function() {}),
          ),
          !0
        );
      } catch (t) {
        return !1;
      }
    })();
    return function() {
      var i,
        r = s(t);
      if (e) {
        var n = s(this).constructor;
        i = Reflect.construct(r, arguments, n);
      } else i = r.apply(this, arguments);
      return h(this, i);
    };
  }
  function u(t) {
    return (
      (function(t) {
        if (Array.isArray(t)) return c(t);
      })(t) ||
      (function(t) {
        if (
          ('undefined' != typeof Symbol && null != t[Symbol.iterator]) ||
          null != t['@@iterator']
        )
          return Array.from(t);
      })(t) ||
      (function(t, e) {
        if (!t) return;
        if ('string' == typeof t) return c(t, e);
        var i = Object.prototype.toString.call(t).slice(8, -1);
        'Object' === i && t.constructor && (i = t.constructor.name);
        if ('Map' === i || 'Set' === i) return Array.from(t);
        if (
          'Arguments' === i ||
          /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)
        )
          return c(t, e);
      })(t) ||
      (function() {
        throw new TypeError(
          'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
        );
      })()
    );
  }
  function c(t, e) {
    (null == e || e > t.length) && (e = t.length);
    for (var i = 0, r = Array(e); e > i; i++) r[i] = t[i];
    return r;
  }
  var f = 1e-6,
    d = 'undefined' != typeof Float32Array ? Float32Array : Array;
  function v() {
    var t = new d(16);
    return (
      d != Float32Array &&
        ((t[1] = 0),
        (t[2] = 0),
        (t[3] = 0),
        (t[4] = 0),
        (t[6] = 0),
        (t[7] = 0),
        (t[8] = 0),
        (t[9] = 0),
        (t[11] = 0),
        (t[12] = 0),
        (t[13] = 0),
        (t[14] = 0)),
      (t[0] = 1),
      (t[5] = 1),
      (t[10] = 1),
      (t[15] = 1),
      t
    );
  }
  function g(t, e, i) {
    var r = e[0],
      n = e[1],
      a = e[2],
      s = e[3],
      o = e[4],
      h = e[5],
      l = e[6],
      u = e[7],
      c = e[8],
      f = e[9],
      d = e[10],
      v = e[11],
      g = e[12],
      p = e[13],
      m = e[14],
      x = e[15],
      y = i[0],
      E = i[1],
      M = i[2],
      R = i[3];
    return (
      (t[0] = y * r + E * o + M * c + R * g),
      (t[1] = y * n + E * h + M * f + R * p),
      (t[2] = y * a + E * l + M * d + R * m),
      (t[3] = y * s + E * u + M * v + R * x),
      (t[4] =
        (y = i[4]) * r + (E = i[5]) * o + (M = i[6]) * c + (R = i[7]) * g),
      (t[5] = y * n + E * h + M * f + R * p),
      (t[6] = y * a + E * l + M * d + R * m),
      (t[7] = y * s + E * u + M * v + R * x),
      (t[8] =
        (y = i[8]) * r + (E = i[9]) * o + (M = i[10]) * c + (R = i[11]) * g),
      (t[9] = y * n + E * h + M * f + R * p),
      (t[10] = y * a + E * l + M * d + R * m),
      (t[11] = y * s + E * u + M * v + R * x),
      (t[12] =
        (y = i[12]) * r + (E = i[13]) * o + (M = i[14]) * c + (R = i[15]) * g),
      (t[13] = y * n + E * h + M * f + R * p),
      (t[14] = y * a + E * l + M * d + R * m),
      (t[15] = y * s + E * u + M * v + R * x),
      t
    );
  }
  function p(t, e, i, r) {
    var n,
      a,
      s,
      o,
      h,
      l,
      u,
      c,
      d,
      v,
      g,
      p,
      m,
      x,
      y,
      E,
      M,
      R,
      _,
      T,
      b,
      w,
      A,
      F,
      P = r[0],
      U = r[1],
      C = r[2],
      k = Math.hypot(P, U, C);
    return f > k
      ? null
      : ((P *= k = 1 / k),
        (U *= k),
        (C *= k),
        (n = Math.sin(i)),
        (h = e[1]),
        (l = e[2]),
        (u = e[3]),
        (d = e[5]),
        (v = e[6]),
        (g = e[7]),
        (m = e[9]),
        (x = e[10]),
        (y = e[11]),
        (_ = P * U * (s = 1 - (a = Math.cos(i))) - C * n),
        (T = U * U * s + a),
        (b = C * U * s + P * n),
        (w = P * C * s + U * n),
        (A = U * C * s - P * n),
        (F = C * C * s + a),
        (t[0] =
          (o = e[0]) * (E = P * P * s + a) +
          (c = e[4]) * (M = U * P * s + C * n) +
          (p = e[8]) * (R = C * P * s - U * n)),
        (t[1] = h * E + d * M + m * R),
        (t[2] = l * E + v * M + x * R),
        (t[3] = u * E + g * M + y * R),
        (t[4] = o * _ + c * T + p * b),
        (t[5] = h * _ + d * T + m * b),
        (t[6] = l * _ + v * T + x * b),
        (t[7] = u * _ + g * T + y * b),
        (t[8] = o * w + c * A + p * F),
        (t[9] = h * w + d * A + m * F),
        (t[10] = l * w + v * A + x * F),
        (t[11] = u * w + g * A + y * F),
        e !== t &&
          ((t[12] = e[12]), (t[13] = e[13]), (t[14] = e[14]), (t[15] = e[15])),
        t);
  }
  Math.hypot ||
    (Math.hypot = function() {
      for (var t = 0, e = arguments.length; e--; )
        t += arguments[e] * arguments[e];
      return Math.sqrt(t);
    });
  var m = function(t, e, i, r, n) {
    var a,
      s = 1 / Math.tan(e / 2);
    return (
      (t[0] = s / i),
      (t[1] = 0),
      (t[2] = 0),
      (t[3] = 0),
      (t[4] = 0),
      (t[5] = s),
      (t[6] = 0),
      (t[7] = 0),
      (t[8] = 0),
      (t[9] = 0),
      (t[11] = -1),
      (t[12] = 0),
      (t[13] = 0),
      (t[15] = 0),
      null != n && n !== 1 / 0
        ? ((t[10] = (n + r) * (a = 1 / (r - n))), (t[14] = 2 * n * r * a))
        : ((t[10] = -1), (t[14] = -2 * r)),
      t
    );
  };
  function x(t, e, i) {
    var r = new d(3);
    return (r[0] = t), (r[1] = e), (r[2] = i), r;
  }
  (y = new d(3)),
    d != Float32Array && ((y[0] = 0), (y[1] = 0), (y[2] = 0)),
    (E = y);
  var y,
    E,
    M = (function() {
      for (var t = [], e = 0; 256 > e; e++)
        t[e] = (16 > e ? '0' : '') + e.toString(16);
      return function() {
        var e = (4294967295 * Math.random()) | 0,
          i = (4294967295 * Math.random()) | 0,
          r = (4294967295 * Math.random()) | 0,
          n = (4294967295 * Math.random()) | 0;
        return (
          t[255 & e] +
          t[(e >> 8) & 255] +
          t[(e >> 16) & 255] +
          t[(e >> 24) & 255] +
          '-' +
          t[255 & i] +
          t[(i >> 8) & 255] +
          '-' +
          t[((i >> 16) & 15) | 64] +
          t[(i >> 24) & 255] +
          '-' +
          t[(63 & r) | 128] +
          t[(r >> 8) & 255] +
          '-' +
          t[(r >> 16) & 255] +
          t[(r >> 24) & 255] +
          t[255 & n] +
          t[(n >> 8) & 255] +
          t[(n >> 16) & 255] +
          t[(n >> 24) & 255]
        ).toUpperCase();
      };
    })();
  function R(t) {
    return 0 == (t & (t - 1)) && 0 !== t;
  }
  function _(t) {
    return Math.pow(2, Math.floor(Math.log(t) / Math.LN2));
  }
  function T(t, e) {
    return Math.sqrt(
      Math.pow(t[0] - e[0], 2) +
        Math.pow(t[1] - e[1], 2) +
        Math.pow(t[2] - e[2], 2),
    );
  }
  var b = (function() {
      function t(e) {
        i(this, t),
          (this.uuid = void 0),
          (this.gl = void 0),
          (this.projMatrix = void 0),
          (this.viewMatrix = void 0),
          (this.modelMatrix = void 0),
          (this.position = void 0),
          (this.cameraDistance = void 0),
          (this.uuid = M()),
          (this.gl = e.gl),
          (this.position = (null == e ? void 0 : e.position) || [0, 0, 0]),
          (this.rotation = (null == e ? void 0 : e.rotation) || [0, 0, 0]),
          (this.scale = (null == e ? void 0 : e.scale) || [1, 1, 1]),
          (this.childrens = []),
          this.setMeshMatrixs(),
          (this.modelMatrix = this.initModelMatrix());
      }
      return (
        n(t, [
          {
            key: 'setMeshMatrixs',
            value: function() {
              this.setTranslete(this.position),
                this.setRotate(),
                this.setScaleMatrix();
            },
          },
          {
            key: 'setTranslete',
            value: function(t) {
              (this.translateMatrix = v()),
                (function(t, e, i) {
                  var r,
                    n,
                    a,
                    s,
                    o,
                    h,
                    l,
                    u,
                    c,
                    f,
                    d,
                    v,
                    g = i[0],
                    p = i[1],
                    m = i[2];
                  e === t
                    ? ((t[12] = e[0] * g + e[4] * p + e[8] * m + e[12]),
                      (t[13] = e[1] * g + e[5] * p + e[9] * m + e[13]),
                      (t[14] = e[2] * g + e[6] * p + e[10] * m + e[14]),
                      (t[15] = e[3] * g + e[7] * p + e[11] * m + e[15]))
                    : ((n = e[1]),
                      (a = e[2]),
                      (s = e[3]),
                      (o = e[4]),
                      (h = e[5]),
                      (l = e[6]),
                      (u = e[7]),
                      (c = e[8]),
                      (f = e[9]),
                      (d = e[10]),
                      (v = e[11]),
                      (t[0] = r = e[0]),
                      (t[1] = n),
                      (t[2] = a),
                      (t[3] = s),
                      (t[4] = o),
                      (t[5] = h),
                      (t[6] = l),
                      (t[7] = u),
                      (t[8] = c),
                      (t[9] = f),
                      (t[10] = d),
                      (t[11] = v),
                      (t[12] = r * g + o * p + c * m + e[12]),
                      (t[13] = n * g + h * p + f * m + e[13]),
                      (t[14] = a * g + l * p + d * m + e[14]),
                      (t[15] = s * g + u * p + v * m + e[15]));
                })(this.translateMatrix, this.translateMatrix, t),
                this.rotateMatrix &&
                  this.scaleMatrix &&
                  this.updateModelMatrix();
            },
          },
          {
            key: 'setRotate',
            value: function(t) {
              t && (this.rotation = u(t)),
                (this.rotateMatrix = v()),
                p(
                  this.rotateMatrix,
                  this.rotateMatrix,
                  this.rotation[0],
                  x(1, 0, 0),
                ),
                p(
                  this.rotateMatrix,
                  this.rotateMatrix,
                  this.rotation[1],
                  x(0, 1, 0),
                ),
                p(
                  this.rotateMatrix,
                  this.rotateMatrix,
                  this.rotation[2],
                  x(0, 0, 1),
                ),
                this.translateMatrix &&
                  this.scaleMatrix &&
                  this.updateModelMatrix();
            },
          },
          {
            key: 'setScaleMatrix',
            value: function() {
              this.scaleMatrix = v();
            },
          },
          {
            key: 'initModelMatrix',
            value: function() {
              return g(
                v(),
                this.scaleMatrix,
                g(v(), this.translateMatrix, this.rotateMatrix),
              );
            },
          },
          {
            key: 'updateModelMatrix',
            value: function() {
              var t;
              g(
                this.modelMatrix,
                this.scaleMatrix,
                g(v(), this.translateMatrix, this.rotateMatrix),
              );
              var e =
                (null == this || null === (t = this.parent) || void 0 === t
                  ? void 0
                  : t.modelMatrix) || v();
              g(this.modelMatrix, e, this.modelMatrix),
                this.childrens.map(function(t) {
                  return t.updateModelMatrix();
                });
            },
          },
          {
            key: 'rotate',
            value: function(t) {
              (this.rotation[0] += t[0]),
                (this.rotation[1] += t[1]),
                (this.rotation[2] += t[2]),
                (function(t, e, i) {
                  var r = Math.sin(i),
                    n = Math.cos(i),
                    a = e[4],
                    s = e[5],
                    o = e[6],
                    h = e[7],
                    l = e[8],
                    u = e[9],
                    c = e[10],
                    f = e[11];
                  e !== t &&
                    ((t[0] = e[0]),
                    (t[1] = e[1]),
                    (t[2] = e[2]),
                    (t[3] = e[3]),
                    (t[12] = e[12]),
                    (t[13] = e[13]),
                    (t[14] = e[14]),
                    (t[15] = e[15])),
                    (t[4] = a * n + l * r),
                    (t[5] = s * n + u * r),
                    (t[6] = o * n + c * r),
                    (t[7] = h * n + f * r),
                    (t[8] = l * n - a * r),
                    (t[9] = u * n - s * r),
                    (t[10] = c * n - o * r),
                    (t[11] = f * n - h * r);
                })(this.rotateMatrix, this.rotateMatrix, t[0]),
                (function(t, e, i) {
                  var r = Math.sin(i),
                    n = Math.cos(i),
                    a = e[0],
                    s = e[1],
                    o = e[2],
                    h = e[3],
                    l = e[8],
                    u = e[9],
                    c = e[10],
                    f = e[11];
                  e !== t &&
                    ((t[4] = e[4]),
                    (t[5] = e[5]),
                    (t[6] = e[6]),
                    (t[7] = e[7]),
                    (t[12] = e[12]),
                    (t[13] = e[13]),
                    (t[14] = e[14]),
                    (t[15] = e[15])),
                    (t[0] = a * n - l * r),
                    (t[1] = s * n - u * r),
                    (t[2] = o * n - c * r),
                    (t[3] = h * n - f * r),
                    (t[8] = a * r + l * n),
                    (t[9] = s * r + u * n),
                    (t[10] = o * r + c * n),
                    (t[11] = h * r + f * n);
                })(this.rotateMatrix, this.rotateMatrix, t[1]),
                (function(t, e, i) {
                  var r = Math.sin(i),
                    n = Math.cos(i),
                    a = e[0],
                    s = e[1],
                    o = e[2],
                    h = e[3],
                    l = e[4],
                    u = e[5],
                    c = e[6],
                    f = e[7];
                  e !== t &&
                    ((t[8] = e[8]),
                    (t[9] = e[9]),
                    (t[10] = e[10]),
                    (t[11] = e[11]),
                    (t[12] = e[12]),
                    (t[13] = e[13]),
                    (t[14] = e[14]),
                    (t[15] = e[15])),
                    (t[0] = a * n + l * r),
                    (t[1] = s * n + u * r),
                    (t[2] = o * n + c * r),
                    (t[3] = h * n + f * r),
                    (t[4] = l * n - a * r),
                    (t[5] = u * n - s * r),
                    (t[6] = c * n - o * r),
                    (t[7] = f * n - h * r);
                })(this.rotateMatrix, this.rotateMatrix, t[2]),
                this.updateModelMatrix();
            },
          },
          {
            key: 'add',
            value: function(t) {
              this.hasChildren(t) ||
                (t.parent && t.parent.remove(t),
                t.setParent(this),
                this.childrens.push(t));
            },
          },
          {
            key: 'hasChildren',
            value: function(t) {
              return (
                !!t.uuid &&
                this.childrens.filter(function(e) {
                  return e.uuid === t.uuid;
                }).length > 0
              );
            },
          },
          {
            key: 'setParent',
            value: function(t) {
              this.parent = t;
            },
          },
          {
            key: 'remove',
            value: function(t) {
              this.childrens = this.childrens.filter(function(e) {
                return e.uuid === t && e.setParent(void 0), e.uuid !== t;
              });
            },
          },
        ]),
        t
      );
    })(),
    w = (function(t) {
      a(r, t);
      var e = l(r);
      function r(t) {
        var n;
        return (
          i(this, r),
          ((n = e.call(this, t)).type = 'Scene'),
          (n.gl = void 0),
          (n.camera = void 0),
          (n.passList = void 0),
          (n.children = []),
          (n.renderer = t.renderer),
          (n.gl = n.renderer.gl),
          (n.camera = t.camera),
          (n.passList = []),
          n
        );
      }
      return (
        n(r, [
          {
            key: 'add',
            value: function(t) {
              t.init(this.gl, this.camera),
                this.hasChildren(t) ||
                  (t.parent && t.parent.remove(t),
                  t.setParent(this),
                  this.children.push(t),
                  (t.scene = this));
            },
          },
          {
            key: 'setCamera',
            value: function(t) {
              this.camera = t;
            },
          },
          { key: 'setRenderer', value: function() {} },
          {
            key: 'addPass',
            value: function(t) {
              t.init(this.gl), this.passList.push(t);
            },
          },
          {
            key: 'drawElements',
            value: function() {
              var t = this,
                e = [],
                i = [];
              this.children.forEach(function(r) {
                (r.cameraDistance = T(r.position, t.camera.position)),
                  r.material.transparent ? i.push(r) : e.push(r);
              }),
                e.sort(function(t, e) {
                  return t.cameraDistance - e.cameraDistance;
                }),
                e.map(function(e) {
                  return e.draw(t.camera);
                }),
                this.gl.depthMask(!1),
                i.map(function(e) {
                  return e.draw(t.camera);
                }),
                this.gl.depthMask(!0);
            },
          },
          {
            key: 'renderScene',
            value: function() {
              if (this.passList.length > 0)
                for (var t = 0; this.passList.length > t; t++) {
                  var e = this.passList[t];
                  this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, e.framebuffer),
                    this.gl.clear(
                      this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT,
                    ),
                    0 === t && this.drawElements(),
                    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null),
                    e.drawPass();
                }
              else
                this.gl.clear(
                  this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT,
                ),
                  this.drawElements();
            },
          },
        ]),
        r
      );
    })(b);
  function A(t, e, i) {
    var r = F(t, t.VERTEX_SHADER, e),
      n = F(t, t.FRAGMENT_SHADER, i);
    if (!r || !n) return null;
    var a = t.createProgram();
    if (!a) return null;
    if (
      (t.attachShader(a, r),
      t.attachShader(a, n),
      t.linkProgram(a),
      !t.getProgramParameter(a, t.LINK_STATUS))
    ) {
      var s = t.getProgramInfoLog(a);
      return (
        console.log('Failed to link program: ' + s),
        t.deleteProgram(a),
        t.deleteShader(n),
        t.deleteShader(r),
        null
      );
    }
    return a;
  }
  function F(t, e, i) {
    var r = t.createShader(e);
    if (null == r) return console.log('unable to create shader'), null;
    if (
      (t.shaderSource(r, i),
      t.compileShader(r),
      !t.getShaderParameter(r, t.COMPILE_STATUS))
    ) {
      var n = t.getShaderInfoLog(r);
      return (
        console.log('Failed to compile shader: ' + n), t.deleteShader(r), null
      );
    }
    return r;
  }
  function P(t, e, i, r, n) {
    var a = t.createBuffer();
    a || console.log('failed create vertex buffer'),
      t.bindBuffer(t.ARRAY_BUFFER, a),
      t.bufferData(t.ARRAY_BUFFER, i, t.STATIC_DRAW);
    var s = t.getAttribLocation(n, e);
    return (
      t.vertexAttribPointer(s, r, t.FLOAT, !1, 0, 0),
      t.enableVertexAttribArray(s),
      t.bindBuffer(t.ARRAY_BUFFER, null),
      { buffer: a, attr: s, count: r }
    );
  }
  function U(t, e, i, r, n) {
    var a = t.getUniformLocation(r, e);
    return (
      0 > a && console.log('无法获取 uniform 变量的存储位置'),
      (function(t, e, i, r) {
        switch (r) {
          case 'float':
            t.uniform1f(e, i);
            break;
          case 'vec2':
            t.uniform2fv(e, i);
            break;
          case 'vec3':
            t.uniform3fv(e, i);
            break;
          case 'vec4':
            t.uniform4fv(e, i);
            break;
          case 'bool':
            t.uniform1i(e, i);
            break;
          case 'sampler2d':
            break;
          case 'mat4':
            t.uniformMatrix4fv(e, !1, i);
        }
      })(t, a, i, n),
      a
    );
  }
  var C = (function() {
    function t(e) {
      i(this, t),
        (this.type = 'Color'),
        (this.r = 1),
        (this.g = 1),
        (this.b = 1),
        (this.a = 1),
        'string' == typeof e
          ? this.handleStringColor(e)
          : e instanceof Array
          ? ((this.r = e[0]), (this.g = e[1]), (this.b = e[2]), (this.a = e[3]))
          : t.isColor(e) &&
            ((this.r = e.r), (this.g = e.g), (this.b = e.b), (this.a = e.a));
    }
    return (
      n(t, [
        {
          key: 'handleStringColor',
          value: function(t) {
            if (t.startsWith('#')) this.handle16Color(t);
            else
              switch (t) {
                case 'red':
                  (this.r = 1), (this.g = 0), (this.b = 0), (this.a = 1);
                  break;
                case 'yellow':
                  (this.r = 1), (this.g = 1), (this.b = 0), (this.a = 1);
                  break;
                case 'blue':
                  (this.r = 0), (this.g = 0), (this.b = 1), (this.a = 1);
                  break;
                case 'green':
                  (this.r = 0), (this.g = 1), (this.b = 0), (this.a = 1);
                  break;
                case 'white':
                  (this.r = 1), (this.g = 1), (this.b = 1), (this.a = 1);
                  break;
                case 'black':
                  (this.r = 0), (this.g = 0), (this.b = 0), (this.a = 1);
              }
          },
        },
        {
          key: 'handle16Color',
          value: function() {
            (this.r = 1), (this.g = 1), (this.b = 1), (this.a = 1);
          },
        },
        {
          key: 'getRGBA',
          value: function() {
            return [this.r, this.g, this.b, this.a];
          },
        },
        {
          key: 'getRGB',
          value: function() {
            return [this.r, this.g, this.b];
          },
        },
      ]),
      t
    );
  })();
  C.isColor = function(t) {
    return !(!t || !t.type || 'Color' !== t.type);
  };
  var k = 'undefined' != typeof OffscreenCanvas;
  function B(t) {
    var e = _(t.width),
      i = _(t.height),
      r = (function(t, e) {
        return k
          ? new OffscreenCanvas(t, e)
          : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
      })(e, i);
    return (
      (r.width = e),
      (r.height = i),
      r.getContext('2d').drawImage(t, 0, 0, e, i),
      r
    );
  }
  function S(t) {
    return new Promise(function(e, i) {
      var r = new Image();
      (r.src = t),
        (r.crossOrigin = 'anonymous'),
        (r.onload = function() {
          var t;
          R((t = r).width) && R(t.height)
            ? e({ succeed: !0, img: r })
            : e({ succeed: !0, img: B(r) });
        }),
        (r.onerror = function(t) {
          i({ succeed: !1, img: r });
        });
    });
  }
  var D = (function(t) {
      a(h, t);
      var r,
        s,
        o = l(h);
      function h(t) {
        var e;
        return (
          i(this, h),
          ((e = o.call(this)).color = void 0),
          (e.opacity = 1),
          (e.transparent = !1),
          (e.map = void 0),
          (e.image = void 0),
          (e.gl = void 0),
          (e.texture = void 0),
          (e.color = new C(t.color)),
          void 0 !== t.opacity && (e.opacity = t.opacity),
          void 0 !== t.transparent && (e.transparent = t.transparent),
          (e.map = (null == t ? void 0 : t.map) || void 0),
          e
        );
      }
      return (
        n(h, [
          {
            key: 'init',
            value:
              ((r = regeneratorRuntime.mark(function t(e) {
                var i, r;
                return regeneratorRuntime.wrap(
                  function(t) {
                    for (;;)
                      switch ((t.prev = t.next)) {
                        case 0:
                          if (((this.gl = e), !this.map)) {
                            t.next = 8;
                            break;
                          }
                          return (t.next = 4), S(this.map);
                        case 4:
                          (r = (i = t.sent).img),
                            i.succeed && ((this.image = r), this.initTexture());
                        case 8:
                        case 'end':
                          return t.stop();
                      }
                  },
                  t,
                  this,
                );
              })),
              (s = function() {
                var t = this,
                  i = arguments;
                return new Promise(function(n, a) {
                  var s = r.apply(t, i);
                  function o(t) {
                    e(s, n, a, o, h, 'next', t);
                  }
                  function h(t) {
                    e(s, n, a, o, h, 'throw', t);
                  }
                  o(void 0);
                });
              }),
              function(t) {
                return s.apply(this, arguments);
              }),
          },
          {
            key: 'initTexture',
            value: function() {
              (this.texture = this.gl.createTexture()),
                this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, 1),
                this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture),
                this.gl.texParameteri(
                  this.gl.TEXTURE_2D,
                  this.gl.TEXTURE_MIN_FILTER,
                  this.gl.LINEAR,
                ),
                this.gl.texParameteri(
                  this.gl.TEXTURE_2D,
                  this.gl.TEXTURE_WRAP_S,
                  this.gl.REPEAT,
                ),
                this.gl.texParameteri(
                  this.gl.TEXTURE_2D,
                  this.gl.TEXTURE_WRAP_T,
                  this.gl.CLAMP_TO_EDGE,
                ),
                this.gl.texImage2D(
                  this.gl.TEXTURE_2D,
                  0,
                  this.gl.RGBA,
                  this.gl.RGBA,
                  this.gl.UNSIGNED_BYTE,
                  this.image,
                ),
                this.emit('loadImage', {
                  texture: this.texture,
                  img: this.image,
                });
            },
          },
          { key: 'destroy', value: function() {} },
        ]),
        h
      );
    })(
      (function() {
        function t() {
          i(this, t), (this.listeners = {});
        }
        return (
          n(t, [
            {
              key: 'on',
              value: function(t, e) {
                this.listeners[t] || (this.listeners[t] = []),
                  this.listeners[t].push(e);
              },
            },
            {
              key: 'emit',
              value: function(t, e) {
                this.listeners[t] &&
                  this.listeners[t].map(function(t) {
                    t(e);
                  });
              },
            },
            {
              key: 'off',
              value: function(t, e) {
                if (this.listeners[t])
                  if (e) {
                    var i = this.listeners[t].indexOf(e);
                    i > -1 && this.listeners[t].splice(i, 1);
                  } else this.listeners[t].length = 0;
              },
            },
          ]),
          t
        );
      })(),
    ),
    L = (function(t) {
      a(r, t);
      var e = l(r);
      function r(t) {
        var n;
        return (
          i(this, r),
          ((n = e.call(this, t)).type = 'PlaneMesh'),
          (n.scene = void 0),
          (n.camera = void 0),
          (n.color = void 0),
          (n.material = new D({})),
          (n.width = 1),
          (n.height = 1),
          (n.imgLoading = !1),
          (n.shaderUnifroms = void 0),
          (n.shaderAttributes = void 0),
          (n.program = void 0),
          (n.texture = void 0),
          void 0 !== t.material && (n.material = t.material),
          void 0 !== t.width && (n.width = t.width),
          void 0 !== t.height && (n.height = t.height),
          (n.shaderUnifroms = []),
          (n.shaderAttributes = []),
          n
        );
      }
      return (
        n(r, [
          {
            key: 'init',
            value: function(t, e) {
              var i;
              (this.gl = t),
                (this.camera = e),
                (this.cameraDistance = T(e.position, this.position)),
                this.material.init(this.gl),
                (this.program = A(
                  this.gl,
                  this.getRectVSHADER(),
                  this.getRectFSHADER(),
                )),
                this.gl.useProgram(this.program);
              var r = new Float32Array([
                  -this.width / 2,
                  this.height / 2,
                  -this.width / 2,
                  -this.height / 2,
                  this.width / 2,
                  this.height / 2,
                  this.width / 2,
                  -this.height / 2,
                ]),
                n = new Float32Array([0, 1, 0, 0, 1, 1, 1, 0]);
              (this.color = new C(
                null == this || null === (i = this.material) || void 0 === i
                  ? void 0
                  : i.color,
              )),
                this.setUnifroms(),
                this.shaderAttributes.push(
                  P(this.gl, 'a_Position', r, 2, this.program),
                ),
                this.shaderAttributes.push(
                  P(this.gl, 'a_TextCoord', n, 2, this.program),
                ),
                this.gl.useProgram(null);
            },
          },
          {
            key: 'setCamera',
            value: function(t) {
              this.camera = t;
            },
          },
          {
            key: 'setUnifroms',
            value: function() {
              var t, e;
              (this.projMatrix = this.camera.getPerspectiveMatrix()),
                U(
                  this.gl,
                  'u_projMatrix',
                  this.projMatrix,
                  this.program,
                  'mat4',
                ),
                (this.viewMatrix = this.camera.getViewMatrix()),
                U(
                  this.gl,
                  'u_viewMatrix',
                  this.viewMatrix,
                  this.program,
                  'mat4',
                ),
                U(
                  this.gl,
                  'u_modelMatrix',
                  this.modelMatrix,
                  this.program,
                  'mat4',
                ),
                U(
                  this.gl,
                  'u_opacity',
                  void 0 !==
                    (null == this ||
                    null === (t = this.material) ||
                    void 0 === t
                      ? void 0
                      : t.opacity)
                    ? null == this ||
                      null === (e = this.material) ||
                      void 0 === e
                      ? void 0
                      : e.opacity
                    : 1,
                  this.program,
                  'float',
                ),
                U(
                  this.gl,
                  'u_color',
                  this.color.getRGB(),
                  this.program,
                  'vec3',
                );
            },
          },
          {
            key: 'updateShaderUnifroms',
            value: function() {
              var t = this;
              if (
                (this.shaderAttributes.map(function(e) {
                  var i = e.attr,
                    r = e.count;
                  t.gl.bindBuffer(t.gl.ARRAY_BUFFER, e.buffer),
                    t.gl.vertexAttribPointer(i, r, t.gl.FLOAT, !1, 0, 0),
                    t.gl.bindBuffer(t.gl.ARRAY_BUFFER, null);
                }),
                this.setUnifroms(),
                this.texture)
              ) {
                this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);
                var e = this.gl.getUniformLocation(this.program, 'u_Sampler');
                this.gl.uniform1i(e, 0);
              }
            },
          },
          {
            key: 'addShaderUnifroms',
            value: function(t, e, i) {
              this.shaderUnifroms.push({ uniformName: t, data: e, vec: i });
            },
          },
          {
            key: 'draw',
            value: function(t) {
              !this.imgLoading &&
                t &&
                (this.gl.useProgram(this.program),
                this.setCamera(t),
                this.updateShaderUnifroms(),
                this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4));
            },
          },
          {
            key: 'getRectVSHADER',
            value: function() {
              return '\n            uniform mat4 u_projMatrix;\n            uniform mat4 u_viewMatrix;\n            uniform mat4 u_modelMatrix;\n\n            attribute vec4 a_Position;\n            attribute vec2 a_TextCoord;\n            varying vec2 v_uv;\n            void main(){\n                v_uv = a_TextCoord;\n\n                gl_Position = u_projMatrix * u_viewMatrix *  u_modelMatrix * a_Position;\n           \n            }\n        ';
            },
          },
          {
            key: 'getRectFSHADER',
            value: function() {
              var t,
                e,
                i = this,
                r = 'gl_FragColor = vec4(u_color, u_opacity);\n',
                n = ['uniform float u_opacity;\n', 'uniform vec3 u_color;'];
              (null == this || null === (t = this.material) || void 0 === t
                ? void 0
                : t.map) &&
                ((this.imgLoading = !0),
                n.push('uniform sampler2D u_Sampler;\n'),
                null === (e = this.material) ||
                  void 0 === e ||
                  e.on('loadImage', function(t) {
                    var e = t.texture;
                    i.gl.useProgram(i.program),
                      (i.texture = e),
                      i.gl.activeTexture(i.gl.TEXTURE0),
                      i.material.texture &&
                        i.gl.bindTexture(i.gl.TEXTURE_2D, e);
                    var r = i.gl.getUniformLocation(i.program, 'u_Sampler');
                    i.gl.uniform1i(r, 0),
                      (i.imgLoading = !1),
                      i.scene && i.scene.renderScene();
                  }),
                (r = 'gl_FragColor = texture2D(u_Sampler, v_uv);\n'));
              return (
                'precision mediump float;\n' +
                n.join('') +
                '\n      varying vec2 v_uv;\n      void main(){\n        '.concat(
                  r,
                  '\n        gl_FragColor.a *= u_opacity;\n      }\n      ',
                )
              );
            },
          },
        ]),
        r
      );
    })(b),
    I = (function() {
      function t(e) {
        i(this, t),
          (this.eye = (null == e ? void 0 : e.eye) || [1, 1, 1]),
          (this.target = (null == e ? void 0 : e.target) || [0, 0, 0]),
          (this.up = (null == e ? void 0 : e.up) || [0, 1, 0]),
          (this.viewMatrix = v()),
          this.initViewMatrix();
      }
      return (
        n(t, [
          {
            key: 'initViewMatrix',
            value: function() {
              !(function(t, e, i, r) {
                var n,
                  a,
                  s,
                  o,
                  h,
                  l,
                  u,
                  c,
                  d,
                  v,
                  g = e[0],
                  p = e[1],
                  m = e[2],
                  x = r[0],
                  y = r[1],
                  E = r[2],
                  M = i[0],
                  R = i[1],
                  _ = i[2];
                f > Math.abs(g - M) &&
                f > Math.abs(p - R) &&
                f > Math.abs(m - _)
                  ? (function(t) {
                      (t[0] = 1),
                        (t[1] = 0),
                        (t[2] = 0),
                        (t[3] = 0),
                        (t[4] = 0),
                        (t[5] = 1),
                        (t[6] = 0),
                        (t[7] = 0),
                        (t[8] = 0),
                        (t[9] = 0),
                        (t[10] = 1),
                        (t[11] = 0),
                        (t[12] = 0),
                        (t[13] = 0),
                        (t[14] = 0),
                        (t[15] = 1);
                    })(t)
                  : ((v =
                      1 / Math.hypot((u = g - M), (c = p - R), (d = m - _))),
                    (v = Math.hypot(
                      (n = y * (d *= v) - E * (c *= v)),
                      (a = E * (u *= v) - x * d),
                      (s = x * c - y * u),
                    ))
                      ? ((n *= v = 1 / v), (a *= v), (s *= v))
                      : ((n = 0), (a = 0), (s = 0)),
                    (v = Math.hypot(
                      (o = c * s - d * a),
                      (h = d * n - u * s),
                      (l = u * a - c * n),
                    ))
                      ? ((o *= v = 1 / v), (h *= v), (l *= v))
                      : ((o = 0), (h = 0), (l = 0)),
                    (t[0] = n),
                    (t[1] = o),
                    (t[2] = u),
                    (t[3] = 0),
                    (t[4] = a),
                    (t[5] = h),
                    (t[6] = c),
                    (t[7] = 0),
                    (t[8] = s),
                    (t[9] = l),
                    (t[10] = d),
                    (t[11] = 0),
                    (t[12] = -(n * g + a * p + s * m)),
                    (t[13] = -(o * g + h * p + l * m)),
                    (t[14] = -(u * g + c * p + d * m)),
                    (t[15] = 1));
              })(this.viewMatrix, this.eye, this.target, this.up);
            },
          },
          {
            key: 'getViewMatrix',
            value: function() {
              return this.viewMatrix;
            },
          },
        ]),
        t
      );
    })(),
    O = (function() {
      function t(e) {
        i(this, t),
          (this.position = void 0),
          (this.aspect = void 0),
          (this.fov = (null == e ? void 0 : e.fov) || 40),
          (this.aspect = (null == e ? void 0 : e.aspect) || 1),
          (this.near = (null == e ? void 0 : e.near) || 0.01),
          (this.far = (null == e ? void 0 : e.far) || 100),
          (this.position = (null == e ? void 0 : e.position) || [1, 1, 1]),
          (this.target = (null == e ? void 0 : e.target) || [0, 0, 0]),
          (this.up = (null == e ? void 0 : e.up) || [0, 1, 0]),
          (this.viewPort = new I({
            eye: this.position,
            target: this.target,
            up: this.up,
          })),
          this.initPerspectiveMatrix();
      }
      return (
        n(t, [
          {
            key: 'initPerspectiveMatrix',
            value: function() {
              (this.perspectiveMatrix = v()),
                m(
                  this.perspectiveMatrix,
                  (this.fov * Math.PI) / 180,
                  this.aspect,
                  this.near,
                  this.far,
                );
            },
          },
          {
            key: 'resize',
            value: function(t, e) {
              (this.aspect = t / e), this.updatePerspectiveMatrix();
            },
          },
          {
            key: 'updatePerspectiveMatrix',
            value: function() {
              this.initPerspectiveMatrix();
            },
          },
          {
            key: 'getPerspectiveMatrix',
            value: function() {
              return this.perspectiveMatrix;
            },
          },
          {
            key: 'getViewMatrix',
            value: function() {
              return this.viewPort.getViewMatrix();
            },
          },
        ]),
        t
      );
    })(),
    N = function(t, e) {
      var i = document.createElement('canvas');
      return H(i, t, e), i;
    },
    H = function(t, e, i) {
      (t.width = e * window.devicePixelRatio),
        (t.height = i * window.devicePixelRatio),
        (t.style.width = e + 'px'),
        (t.style.height = i + 'px');
    },
    G = (function() {
      function t(e) {
        i(this, t),
          (this.gl = void 0),
          (this.wrap = void 0),
          (this.clearColor = void 0),
          (this.canvas = void 0),
          (this.renderPixelWidth = void 0),
          (this.renderPixelHeight = void 0),
          (this.clearColor = new C(e.clearColor)),
          this.initRenderContext(e.wrap),
          this.renderPixelSize();
      }
      return (
        n(t, [
          {
            key: 'initRenderContext',
            value: function(t) {
              if ('string' == typeof t) {
                this.wrap = document.getElementById('wrap');
                var e = this.wrap;
                this.canvas = N(e.clientWidth, e.clientHeight);
              } else if (t instanceof HTMLCanvasElement)
                (this.wrap = t.parentNode), (this.canvas = t);
              else {
                this.wrap = t;
                var i = this.wrap;
                this.canvas = N(i.clientWidth, i.clientHeight);
              }
              this.wrap.appendChild(this.canvas),
                (this.gl = this.canvas.getContext('webgl')),
                this.initGLParams(this.gl);
            },
          },
          {
            key: 'initGLParams',
            value: function(t) {
              var e = this.clearColor.getRGBA();
              t.clearColor(e[0], e[1], e[2], e[3]),
                t.clear(t.COLOR_BUFFER_BIT),
                t.enable(t.DEPTH_TEST),
                t.clear(t.DEPTH_BUFFER_BIT),
                t.enable(t.BLEND),
                t.blendFunc(t.SRC_ALPHA, t.ONE_MINUS_SRC_ALPHA),
                t.enable(t.CULL_FACE),
                t.disable(t.CULL_FACE);
            },
          },
          {
            key: 'renderPixelSize',
            value: function() {
              var t = this.canvas,
                e = t.clientHeight;
              (this.renderPixelWidth = t.clientWidth),
                (this.renderPixelHeight = e);
            },
          },
          {
            key: 'resize',
            value: function() {
              var t = this.wrap;
              H(this.canvas, t.clientWidth, t.clientHeight),
                this.renderPixelSize(),
                this.gl.viewport(
                  0,
                  0,
                  this.gl.canvas.width,
                  this.gl.canvas.height,
                );
            },
          },
        ]),
        t
      );
    })(),
    X = (function() {
      function t(e) {
        i(this, t), (this.gl = void 0), (this.shaderAttributes = []);
      }
      return (
        n(t, [
          {
            key: 'init',
            value: function(t) {
              this.gl = t;
              var e = (function(t) {
                var e = t.drawingBufferHeight,
                  i = _(t.drawingBufferWidth),
                  r = _(e),
                  n = t.createFramebuffer();
                t.bindFramebuffer(t.FRAMEBUFFER, n);
                var a = t.createRenderbuffer();
                t.bindRenderbuffer(t.RENDERBUFFER, a),
                  t.renderbufferStorage(
                    t.RENDERBUFFER,
                    t.DEPTH_COMPONENT16,
                    i,
                    r,
                  ),
                  t.framebufferRenderbuffer(
                    t.FRAMEBUFFER,
                    t.DEPTH_ATTACHMENT,
                    t.RENDERBUFFER,
                    a,
                  );
                var s = t.createTexture();
                return (
                  (n.texture = s),
                  (n.width = i),
                  (n.height = r),
                  t.bindTexture(t.TEXTURE_2D, s),
                  t.texParameteri(
                    t.TEXTURE_2D,
                    t.TEXTURE_MAG_FILTER,
                    t.NEAREST,
                  ),
                  t.texParameteri(
                    t.TEXTURE_2D,
                    t.TEXTURE_MIN_FILTER,
                    t.NEAREST,
                  ),
                  t.texImage2D(
                    t.TEXTURE_2D,
                    0,
                    t.RGBA,
                    i,
                    r,
                    0,
                    t.RGBA,
                    t.UNSIGNED_BYTE,
                    null,
                  ),
                  t.framebufferTexture2D(
                    t.FRAMEBUFFER,
                    t.COLOR_ATTACHMENT0,
                    t.TEXTURE_2D,
                    s,
                    0,
                  ),
                  t.bindTexture(t.TEXTURE_2D, null),
                  t.bindFramebuffer(t.FRAMEBUFFER, null),
                  {
                    FRAMEBUFFER: n,
                    OFFER_SCREEN_WIDTH: i,
                    OFFER_SCREEN_HEIGHT: r,
                  }
                );
              })(this.gl);
              (this.framebuffer = e.FRAMEBUFFER),
                (this.v =
                  '\n            attribute vec4 a_Position;\n            attribute vec2 a_TextCoord;\n            varying vec2 v_TexCoord;\n\n            void main(){\n                gl_Position = a_Position;\n                v_TexCoord = a_TextCoord;\n            }\n        '),
                (this.f =
                  '\n            precision mediump float;\n\n            uniform sampler2D u_Sampler;\n            varying vec2 v_TexCoord;\n\n            void main(){\n                // https://www.cnblogs.com/zhangjiansheng/p/6925722.html\n                // Gray = (R*38 + G*75 + B*15) >> 7\n                // Gray = R*0.299 + G*0.587 + B*0.114\n                vec4 screenPixels = texture2D(u_Sampler, v_TexCoord);\n\n                float R = screenPixels.r;\n                float G = screenPixels.g;\n                float B = screenPixels.b;\n                float gray = R*0.299 + G*0.587 + B*0.114;\n            \n                gl_FragColor = vec4(vec3(gray), 1.0);\n            }'),
                (this.rectVertices = new Float32Array([
                  -1,
                  1,
                  -1,
                  -1,
                  1,
                  1,
                  1,
                  -1,
                ])),
                (this.rectUvs = new Float32Array([0, 1, 0, 0, 1, 1, 1, 0])),
                (this.program = A(this.gl, this.v, this.f)),
                this.gl.useProgram(this.program);
              var i = P(
                  this.gl,
                  'a_Position',
                  this.rectVertices,
                  2,
                  this.program,
                ),
                r = i.attr,
                n = i.count;
              (this.posBuffer = i.buffer),
                (this.pAttr = r),
                (this.posCount = n);
              var a = P(this.gl, 'a_TextCoord', this.rectUvs, 2, this.program),
                s = a.count;
              (this.texBuffer = a.buffer),
                (this.texCount = s),
                this.gl.activeTexture(this.gl.TEXTURE0);
              var o = this.gl.getUniformLocation(this.program, 'u_Sampler');
              this.gl.uniform1i(o, 0);
            },
          },
          {
            key: 'drawPass',
            value: function() {
              this.gl.clear(
                this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT,
              ),
                this.gl.useProgram(this.program),
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.posBuffer),
                this.gl.vertexAttribPointer(
                  this.pAttr,
                  this.posCount,
                  this.gl.FLOAT,
                  !1,
                  0,
                  0,
                ),
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null),
                this.gl.bindTexture(
                  this.gl.TEXTURE_2D,
                  this.framebuffer.texture,
                ),
                this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4),
                this.gl.bindTexture(this.gl.TEXTURE_2D, null);
            },
          },
        ]),
        t
      );
    })();
  (t.BasicMaterial = D),
    (t.Camera = O),
    (t.Color = C),
    (t.GrayPass = X),
    (t.Plane = L),
    (t.Renderer = G),
    (t.Scene = w),
    Object.defineProperty(t, '__esModule', { value: !0 });
});
//# sourceMappingURL=renderer.min.js.map
